{
  "_args": [
    [
      "vent",
      "/Users/phillipbooth/Desktop/PersonalGitRepos/food-routes"
    ]
  ],
  "_from": "vent@latest",
  "_id": "vent@0.0.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/vent",
  "_npmUser": {
    "email": "mikeycrikey@gmail.com",
    "name": "accordionpeas"
  },
  "_npmVersion": "1.3.14",
  "_phantomChildren": {},
  "_requested": {
    "name": "vent",
    "raw": "vent",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vent/-/vent-0.0.2.tgz",
  "_shasum": "7038ebdd024152d254c12104a2bdd46b29be2f3e",
  "_shrinkwrap": null,
  "_spec": "vent",
  "_where": "/Users/phillipbooth/Desktop/PersonalGitRepos/food-routes",
  "bugs": {
    "url": "https://github.com/accordionpeas/vent.js/issues"
  },
  "dependencies": {},
  "description": "JavaScript event dispatcher",
  "devDependencies": {
    "chai": "1.8.1",
    "mocha": "1.15.1"
  },
  "directories": {},
  "dist": {
    "shasum": "7038ebdd024152d254c12104a2bdd46b29be2f3e",
    "tarball": "http://registry.npmjs.org/vent/-/vent-0.0.2.tgz"
  },
  "homepage": "http://github.com/accordionpeas/vent.js",
  "keywords": [
    "vent",
    "event dispatcher",
    "events"
  ],
  "main": "./vent.js",
  "maintainers": [
    {
      "email": "mikeycrikey@gmail.com",
      "name": "accordionpeas"
    }
  ],
  "name": "vent",
  "optionalDependencies": {},
  "readme": "vent.js\r\n====\r\n\r\nJavaScript event dispatcher that facilitates binding, unbinding and triggering of events based on Backbone's event module.\r\n\r\nvent.js ships with support for commonJS and AMD environments.\r\n\r\n## Usage\r\n\r\nBelow is an example of how to use vent.js:\r\n\r\n\t//create a new instance of vent.\r\n\tvar vent = new Vent();\r\n\t\r\n\t//bind an event listener.\r\n\tvent.on('myEvent', function(data){\r\n\t\tconsole.log(data);\r\n\t});\r\n\t\r\n\t//trigger an event\r\n\tvent.trigger('myEvent', {\r\n\t\tsome: 'data'\r\n\t});\r\n\t\r\n\t//unbind an event\r\n\tvent.off('myEvent');\r\n\t\r\n# on / bind\r\n\r\n> vent.on(event, callback, [context])\r\n\r\nBind event listener(s) to an object. The 'callback' will be invoked when the 'event' is fired. To bind the same callback to multiple events pass the 'event' parameter in as a space-separated string.\r\n\r\nThe 'context' of the callback can be specified by passing an object in as the optional third parameter.\r\n\r\nCallbacks bound to the special 'all' event will be triggered when any event fires and are passed the name of the event as the first parameter. E.g.\r\n\r\n\tvent.on('all', function(eventName){\r\n\t\tconsole.log(eventName);\r\n\t});\r\n\r\n# off / unbind\r\n\r\n> vent.off([event], [callback], [context])\r\n\r\nUnbind event listener(s) from an object. There are 4 levels of specificity that can be achieved with this method;\r\n\r\n- No parameters\r\n\r\n\tRemoves all event listeners\r\n\r\n\tvent.off();\r\n\r\n- 1 parameter\r\n\r\n\tRemoves all event listeners for the given event name\r\n\r\n\tvent.off('change')\r\n\r\n- 2 parameters\r\n\r\n\tRemoves all event listeners for the given event name that match the callback function\r\n\r\n\tvent.off('change', onChange)\r\n\t\r\n- 3 parameters\r\n\r\n\tRemoves all event listeners for the given event name that match the callback function and the context\r\n\r\n\tvent.off('change', onChange, anotherObject)\r\n\t\r\nLike the 'on' method, the 'event' parameter may refer to more than one event by passing it as a space-separated string.\r\n\t\r\n# trigger\r\n\r\n> vent.trigger(event, [*args])\r\n\r\nTriggers event listener(s) on an object. The arguments that are passed into this method are sent to the listener callback.\r\n\r\nMultiple events can be triggered by passing the 'event' parameter as a space-separated string.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/accordionpeas/vent.js.git"
  },
  "version": "0.0.2"
}
